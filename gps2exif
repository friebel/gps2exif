#!/usr/bin/env python3
import argparse
import exif
import gpxparser
import sys
import time


def parse_cmdline_time(txt):
    """Parse time (and date) given on command line.  Returning tuple with two elements.
    First element is boolean indicating whether a date was given additional to time.
    Second alement is the parsed time/date value."""

    # Parse date and time, with date using "-" as separator and time using ":"
    try:
        return (True, time.mktime(time.strptime(txt, "%Y-%m-%d %H:%M:%S")))
    except ValueError:
        pass

    # Parse date and time, with date and time both using ":" as separator
    try:
        return (True, time.mktime(time.strptime(txt, "%Y:%m:%d %H:%M:%S")))
    except ValueError:
        pass

    # Parse time only, with ":" as separator
    try:
        t = time.strptime(txt, "%H:%M:%S")
        t = (
            2000,
            t.tm_mon,
            t.tm_mday,
            t.tm_hour,
            t.tm_min,
            t.tm_sec,
            t.tm_wday,
            t.tm_yday,
            t.tm_isdst,
        )
        return (False, time.mktime(t))
    except ValueError:
        pass

    raise ValueError("Can not parse date/time {!r}".format(txt))


def format_time_offset(delta):
    if not delta:
        return ""

    neg = delta < 0
    delta = abs(int(delta))

    if neg:
        sign = "-"
    else:
        sign = "+"

    return "{}{:d}:{:02d}:{:02d}".format(
        sign,
        delta // 3600,
        delta // 60 % 60,
        int(delta % 60),
    )


def parse_time_offset(txt):
    parse_err = ValueError("Can not parse time offset {!r}".format(txt))

    if not txt:
        raise parse_err

    # Save and remove +/- sign
    if txt[0] == "+":
        sign = 1
    elif txt[0] == "-":
        sign = -1
    else:
        raise parse_err

    txt = txt[1:]

    # Parse days
    values = txt.split(" ", 1)
    if len(values) > 1:
        try:
            days = int(values[0])
        except ValueError:
            raise parse_err
        txt = values[1]
    else:
        days = 0

    # Parse [[%H:]%M:]%S
    values = txt.split(":", 2)

    secs = int(values[-1])
    del values[-1]

    if values:
        mins = int(values[-1])
        del values[-1]
    else:
        mins = 0

    if values:
        hours = int(values[-1])
        del values[-1]
    else:
        hours = 0

    offset = ((days * 24 + hours) * 60 + mins) * 60 + secs

    return sign * offset


def process_timeref_args(ref_image, ref_time):
    global args

    (ref_time_hasdate, ref_time) = parse_cmdline_time(ref_time)

    # Read time from reference image
    ref_img_time = exif.get_time(ref_image.name)

    # Set reference date of file when no date given
    if not ref_time_hasdate:
        img = time.localtime(ref_img_time)
        ref = time.localtime(ref_time)
        ref_time = time.mktime(
            (
                img.tm_year,
                img.tm_mon,
                img.tm_mday,
                ref.tm_hour,
                ref.tm_min,
                ref.tm_sec,
                img.tm_wday,
                img.tm_yday,
                img.tm_isdst,
            )
        )

    # Calculate time offset
    time_offset = ref_time - ref_img_time

    # Print some info
    if args.verbosity >= 1:
        print(
            "Reference image date/time is set to: {}.{:02d}".format(
                time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(ref_img_time)),
                int((ref_img_time % 1) * 100),
            )
        )
        print(
            "Reference image date/time should be: {}.{:02d}".format(
                time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(ref_time)),
                int((ref_time % 1) * 100),
            )
        )
        print("Date/time fixing delta: {}".format(format_time_offset(time_offset)))

    return time_offset


def gpx_find_enclosing(gpxs, file_time):
    # TODO: timezone conversion necessary?

    for gpx in gpxs:
        for track_id, track in gpx.tracks.iteritems():
            # Skip track if file time is out of its bounds
            if file_time < track[0].time or file_time > track[-1].time:
                continue

            for idx, p in enumerate(track[1:]):
                if file_time < p.time:
                    return (track[idx], p)

    return None


def main():
    global args

    description = (
        "Set image location EXIF tags from corrsponding GPS track."
        " Optionally shift the images' date/time first."
    )

    parser = argparse.ArgumentParser(description=description)

    parser.add_argument(
        "--ref-img",
        dest="ref_image",
        type=argparse.FileType("r"),
        help="reference image file name for shifting time using --ref-time",
    )

    parser.add_argument(
        "--ref-time",
        dest="ref_time",
        help="Corrected reference image date/time to calculate time offset for shifting."
        " If one of --ref-img and --ref-time is given the other one must be given too.",
    )

    parser.add_argument(
        "--shift-time",
        dest="shift_time",
        help="Shift time of all images by given offset."
        " Example: '--shift-time=+1:09' to add 1 minute, 9 seconds"
        " to the images' EXIF time.",
    )

    parser.add_argument(
        "--gpx",
        dest="gpxs",
        metavar="GPX",
        type=argparse.FileType("r"),
        action="append",
        default=[],
        help=".gpx GPS track file",
    )

    parser.add_argument(
        "--max-dist",
        dest="max_dist",
        metavar="MTRS",
        type=int,
        default=200,
        help="skip if enclosing GPS points are more than MTRS meters apart (default: %(default)s)",
    )

    parser.add_argument(
        "--max-span",
        dest="max_span",
        metavar="SECS",
        type=int,
        default=3600,
        help="skip if enclosing GPS points are more than SECS seconds apart (default: %(default)s)",
    )

    parser.add_argument(
        "--ok-dist",
        dest="ok_dist",
        metavar="MTRS",
        type=int,
        default=32,
        help="assign if enclosing GPS points are less than MTRS meters apart (default: %(default)s)",
    )

    parser.add_argument(
        "--ok-span",
        dest="ok_span",
        metavar="SECS",
        type=int,
        default=10,
        help="assign if enclosing GPS points are less than SECS seconds apart (default: %(default)s)",
    )

    parser.add_argument(
        "-n",
        dest="no_action",
        action="store_true",
        default=False,
        help="do not change any files",
    )

    parser.add_argument(
        "-v", dest="verbosity", action="count", default=0, help="increase verbosity"
    )

    parser.add_argument(
        "images", metavar="IMAGE", nargs="+", help="image file to process"
    )

    try:
        args = parser.parse_args()
    except IOError as e:
        print(e)
        return 1

    # ref_image and ref_time must be given both or none
    if bool(args.ref_image) ^ bool(args.ref_time):
        parser.error("Options --ref-img and --ref-time must be given both or none.")

    if bool(args.ref_image) and args.shift_time:
        parser.error("Option --shift-time can not be used with --ref-img/--ref-time.")

    # check that we can execute "exif"
    if not exif.init():
        return 1

    # Time zone info
    if args.verbosity >= 1:
        print("Assuming image time zone {0[0]}/{0[1]}".format(time.tzname))

    time_offset = None

    # Parse time offset given at command line
    if args.shift_time:
        time_offset = parse_time_offset(args.shift_time)

    # Calculate time offset from reference image
    if args.ref_image or args.ref_time:
        time_offset = process_timeref_args(args.ref_image, args.ref_time)

    # Read GPS data
    gpxs = []
    for gpxfile in args.gpxs:
        print("Reading GPX file {}".format(gpxfile.name))
        data = gpxparser.GPXFile(gpxfile)
        if args.verbosity >= 1:
            print(
                "  {:d} points in {:d} tracks".format(
                    sum([len(t) for t_id, t in data.tracks.iteritems()]),
                    len(data.tracks),
                )
            )
        gpxs.append(data)

        if args.verbosity >= 2:
            for t_id, track in data.tracks.iteritems():
                print("Track {}:".format(t_id))
                for p in track:
                    print("  {}".format(p))

    # Fix time offset
    if time_offset:
        print("Applying date/time delta {}".format(format_time_offset(time_offset)))

        for filename in args.images:
            print("  {}:".format(filename), end="")

            file_time = exif.get_time(filename)
            new_time = file_time + time_offset

            if args.verbosity >= 2:
                print(
                    " {}.{:02d} ->".format(
                        time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(file_time)),
                        int((file_time % 1) * 100),
                    ),
                    end="",
                )
            print(
                " {}.{:02d}".format(
                    time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(new_time)),
                    int((new_time % 1) * 100),
                ),
                end="",
            )
            if args.verbosity >= 3:
                print(" ({} -> {}) ".format(file_time, new_time), end="")
            print()

            if args.no_action:
                continue

            exif.set_time(filename, new_time)

    # Set GPS data
    if gpxs:
        print("Setting GPS data")

        for filename in args.images:
            print("  {}:".format(filename), end="")
            if args.verbosity >= 2:
                print()

            file_time = exif.get_time(filename)
            gpx_points = gpx_find_enclosing(gpxs, file_time)
            if not gpx_points:
                if args.verbosity >= 2:
                    print("    No GPS data at the time of this photo")
                else:
                    print("no data")
                continue

            # Calculate time gap and distance
            time_gap = gpx_points[1].time - gpx_points[0].time
            distance = gpx_points[0].distance(gpx_points[1]) * 1000

            if args.verbosity >= 2:
                print("    Time:     {}".format(file_time))
                print("    Before:   {}".format(gpx_points[0]))
                print("    After:    {}".format(gpx_points[1]))
                print("    Time gap: {} s".format(time_gap))
                print("    Distance: {:.1f} m".format(distance))
                print("   ", end="")

            # Skip if time_gap or distance beyond max
            if distance > args.max_dist or time_gap > args.max_span:
                if distance > args.max_dist:
                    print("Distance too big", end="")
                    if args.verbosity >= 1:
                        print("({} m)".format(distance), end="")

                if time_gap > args.max_span:
                    print("Time span too big", end="")
                    if args.verbosity >= 1:
                        print("({} s)".format(time_gap), end="")

                print()
                continue

            # Skip if neither time_gap nor distance are okay
            if time_gap > args.ok_span and distance > args.ok_dist:
                print("Neither distance nor time span okay", end="")
                if args.verbosity >= 1:
                    print(
                        "({:.1f} m > {} m, {} s > {} s)".format(
                            distance, args.ok_dist, time_gap, args.ok_span
                        ),
                        end="",
                    )
                print()
                continue

            # Interpolate position
            image_gps = gpx_points[0].interpolate(gpx_points[1], file_time)

            if args.verbosity >= 2:
                print("Position: {}".format(image_gps))
            else:
                print("ok")

            if args.no_action:
                continue

            # Write exif data
            exif.set_gpslocation(filename, image_gps.lat, image_gps.lon, image_gps.ele)


if __name__ == "__main__":
    res = main()
    sys.exit(res)


# vim: set ts=4 sts=4 sw=4
